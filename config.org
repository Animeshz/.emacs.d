#+TITLE: Main Emacs Config (after early-init.el and init.el)
#+PROPERTIES: header-args :lexical t

* General Tweaks

** Better Defaults (Mandatory)

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t
      org-export-preserve-breaks t)

(setq create-lockfiles nil
      make-backup-files nil)

(setq use-short-answers t)

(setq-default fill-column 120)

(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default evil-shift-width tab-width)
#+END_SRC

** Set Keybinds

#+BEGIN_SRC emacs-lisp :noweb-ref general-config :tangle no
(general-define-key
 :states '(insert)
 :keymaps '(override local global)

 "C-S-v" 'evil-paste-before-cursor-after
 "TAB" 'tab-to-tab-stop)

(general-define-key
 :states '(normal motion visual operator emacs)
 :keymaps '(override local global)

 "H" 'evil-beginning-of-line
 "J" 'evil-goto-line
 "K" 'evil-goto-first-line
 "L" 'evil-end-of-line

 "," 'evil-scroll-line-down
 "." 'evil-scroll-line-up

 "C-+" 'text-scale-increase
 "C-_" 'text-scale-decrease
 "C--" 'text-scale-decrease

 "<escape>" 'keyboard-escape-quit
 "<tab>" #'next-buffer
 "<backtab>" #'previous-buffer

 "go" '(avy-goto-word-0 :which-key "avy goto word")
 "gl" '(avy-goto-char :which-key "avy goto letter"))

(general-create-definer leader-key
  :states '(normal motion visual operator emacs)
  :keymaps '(override local global)
  :prefix "SPC")

(leader-key
  "ff" 'find-file
  "tw" 'delete-trailing-whitespace
  "bk" 'kill-this-buffer
  "c" 'display-fill-column-indicator-mode
  "/" 'comment-line)                    ;

;; (global-unset-key (kbd "C-c C-a"))
;; (evilem-default-keybindings "C-c C-a")
;; (define-key evilem-map "s"
;;   (evilem-create (list #'evil-snipe-repeat #'evil-snipe-repeat-reverse
;;                   :name 'evil-easymotion-snipe-forward
;;                   :pre-hook (save-excursion (call-interactively #'evil-snipe-s))
;;                   :bind ((evil-snipe-scope 'buffer))
;;                         (evil-snipe-enable-highlight)
;;                         (evil-snipe-enable-incremental-highlight))))

#+END_SRC


* Packages

** Undo History

#+BEGIN_SRC emacs-lisp
;; keep undo history
(use-package undo-fu)
;; save command history
(use-package savehist
  :elpaca nil
  :init
  (savehist-mode))
;; keep file history between emacs sessions
(use-package undohist
  :init
  (setq undo-tree-history-directory-alist '(((concat user-emacs-directory "/undohist"))))
  :config
  (undohist-initialize))
#+END_SRC

** Evil + General (Vim-Keybind)

#+BEGIN_SRC emacs-lisp :noweb yes
(use-package evil
  :after undo-fu
  :init
  (setq evil-want-keybinding nil)
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1)
  (setq ;evil-want-fine-undo t
   evil-vsplit-window-right t
   evil-split-window-below t))

(use-package helpful)
(use-package general
  :after (evil helpful avy)  ; evil-easymotion evil-snipe)
  :config
  (general-override-mode)
  (general-auto-unbind-keys)
  (general-evil-setup t)

  ;; Remap C-h to helpful package
  (general-define-key
   :prefix "C-h"
   "f" #'helpful-callable
   "v" #'helpful-variable
   "k" #'helpful-key
   "F" #'helpful-function
   "C" #'helpful-command)
  <<general-config>>)
#+END_SRC

** Vertico + Orderless (Autosuggestion & Fuzzy Finder)

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (setq vertico-count 20
        vertico-resize nil
        vertico-cycle t)
  (vertico-mode))

(use-package orderless
  :custom
  ;; (orderless-matching-styles '(orderless-literal orderless-regexp orderless-flex))
  (completion-styles '(orderless))
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Which Key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
(setq which-key-idle-delay 0.4)
#+END_SRC

** Avy / EasyMotion (Goto)

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (custom-set-faces
   `(avy-lead-face ((t (:background ,(face-background 'default) :foreground ,(face-attribute 'ansi-color-bright-yellow :foreground) :weight bold))))
   `(avy-lead-face-0 ((t (:background ,(face-background 'default) :foreground "cyan"))))
   `(avy-lead-face-1 ((t (:background ,(face-background 'default) :foreground "magenta"))))
   `(avy-lead-face-2 ((t (:background ,(face-background 'default) :foreground "goldenrod"))))))
(setq avy-style 'words)
(setq avy-goto-word-0-regexp "[^\s]+")
(setq avy-words '("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" "aa" "ab" "ac" "ad" "ae" "af" "ag" "ah" "ai" "aj" "ak" "al" "am" "an" "ao" "ap" "aq" "ar" "as" "at" "au" "av" "aw" "ax" "ay" "az" "ba" "bb" "bc" "bd" "be" "bf" "bg" "bh" "bi" "bj" "bk" "bl" "bm" "bn" "bo" "bp" "bq" "br" "bs" "bt" "bu" "bv" "bw" "bx" "by" "bz" "ca" "cb" "cc" "cd" "ce" "cf" "cg" "ch" "ci" "cj" "ck" "cl" "cm" "cn" "co" "cp" "cq" "cr" "cs" "ct" "cu" "cv" "cw" "cx" "cy" "cz" "da" "db" "dc" "dd" "de" "df" "dg" "dh" "di" "dj" "dk" "dl" "dm" "dn" "do" "dp" "dq" "dr" "ds" "dt" "du" "dv" "dw" "dx" "dy" "dz" "ea" "eb" "ec" "ed" "ee" "ef" "eg" "eh" "ei" "ej" "ek" "el" "em" "en" "eo" "ep" "eq" "er" "es" "et" "eu" "ev" "ew" "ex" "ey" "ez" "fa" "fb" "fc" "fd" "fe" "ff" "fg" "fh" "fi" "fj" "fk" "fl" "fm" "fn" "fo" "fp" "fq" "fr" "fs" "ft" "fu" "fv" "fw" "fx" "fy" "fz" "ga" "gb" "gc" "gd" "ge" "gf" "gg" "gh" "gi" "gj" "gk" "gl" "gm" "gn" "go" "gp" "gq" "gr" "gs" "gt" "gu" "gv" "gw" "gx" "gy" "gz" "ha" "hb" "hc" "hd" "he" "hf" "hg" "hh" "hi" "hj" "hk" "hl" "hm" "hn" "ho" "hp" "hq" "hr" "hs" "ht" "hu" "hv" "hw" "hx" "hy" "hz" "ia" "ib" "ic" "id" "ie" "if" "ig" "ih" "ii" "ij" "ik" "il" "im" "in" "io" "ip" "iq" "ir" "is" "it" "iu" "iv" "iw" "ix" "iy" "iz" "ja" "jb" "jc" "jd" "je" "jf" "jg" "jh" "ji" "jj" "jk" "jl" "jm" "jn" "jo" "jp" "jq" "jr" "js" "jt" "ju" "jv" "jw" "jx" "jy" "jz" "ka" "kb" "kc" "kd" "ke" "kf" "kg" "kh" "ki" "kj" "kk" "kl" "km" "kn" "ko" "kp" "kq" "kr" "ks" "kt" "ku" "kv" "kw" "kx" "ky" "kz" "la" "lb" "lc" "ld" "le" "lf" "lg" "lh" "li" "lj" "lk" "ll" "lm" "ln" "lo" "lp" "lq" "lr" "ls" "lt" "lu" "lv" "lw" "lx" "ly" "lz" "ma" "mb" "mc" "md" "me" "mf" "mg" "mh" "mi" "mj" "mk" "ml" "mm" "mn" "mo" "mp" "mq" "mr" "ms" "mt" "mu" "mv" "mw" "mx" "my" "mz" "na" "nb" "nc" "nd" "ne" "nf" "ng" "nh" "ni" "nj" "nk" "nl" "nm" "nn" "no" "np" "nq" "nr" "ns" "nt" "nu" "nv" "nw" "nx" "ny" "nz" "oa" "ob" "oc" "od" "oe" "of" "og" "oh" "oi" "oj" "ok" "ol" "om" "on" "oo" "op" "oq" "or" "os" "ot" "ou" "ov" "ow" "ox" "oy" "oz" "pa" "pb" "pc" "pd" "pe" "pf" "pg" "ph" "pi" "pj" "pk" "pl" "pm" "pn" "po" "pp" "pq" "pr" "ps" "pt" "pu" "pv" "pw" "px" "py" "pz" "qa" "qb" "qc" "qd" "qe" "qf" "qg" "qh" "qi" "qj" "qk" "ql" "qm" "qn" "qo" "qp" "qq" "qr" "qs" "qt" "qu" "qv" "qw" "qx" "qy" "qz" "ra" "rb" "rc" "rd" "re" "rf" "rg" "rh" "ri" "rj" "rk" "rl" "rm" "rn" "ro" "rp" "rq" "rr" "rs" "rt" "ru" "rv" "rw" "rx" "ry" "rz" "sa" "sb" "sc" "sd" "se" "sf" "sg" "sh" "si" "sj" "sk" "sl" "sm" "sn" "so" "sp" "sq" "sr" "ss" "st" "su" "sv" "sw" "sx" "sy" "sz" "ta" "tb" "tc" "td" "te" "tf" "tg" "th" "ti" "tj" "tk" "tl" "tm" "tn" "to" "tp" "tq" "tr" "ts" "tt" "tu" "tv" "tw" "tx" "ty" "tz" "ua" "ub" "uc" "ud" "ue" "uf" "ug" "uh" "ui" "uj" "uk" "ul" "um" "un" "uo" "up" "uq" "ur" "us" "ut" "uu" "uv" "uw" "ux" "uy" "uz" "va" "vb" "vc" "vd" "ve" "vf" "vg" "vh" "vi" "vj" "vk" "vl" "vm" "vn" "vo" "vp" "vq" "vr" "vs" "vt" "vu" "vv" "vw" "vx" "vy" "vz" "wa" "wb" "wc" "wd" "we" "wf" "wg" "wh" "wi" "wj" "wk" "wl" "wm" "wn" "wo" "wp" "wq" "wr" "ws" "wt" "wu" "wv" "ww" "wx" "wy" "wz" "xa" "xb" "xc" "xd" "xe" "xf" "xg" "xh" "xi" "xj" "xk" "xl" "xm" "xn" "xo" "xp" "xq" "xr" "xs" "xt" "xu" "xv" "xw" "xx" "xy" "xz" "ya" "yb" "yc" "yd" "ye" "yf" "yg" "yh" "yi" "yj" "yk" "yl" "ym" "yn" "yo" "yp" "yq" "yr" "ys" "yt" "yu" "yv" "yw" "yx" "yy" "yz" "za" "zb" "zc" "zd" "ze" "zf" "zg" "zh" "zi" "zj" "zk" "zl" "zm" "zn" "zo" "zp" "zq" "zr" "zs" "zt" "zu" "zv" "zw" "zx" "zy" "zz"))

;; (setq avy-subword-extra-word-chars "")

;; (use-package evil-easymotion)
;; (use-package evil-snipe)
#+END_SRC


** Theme & Font
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (load-theme 'doom-city-lights t)
  (custom-set-faces
   '(doom-themes-visual-bell (( t(:background "#00FFFF"))))
   '(org-ellipsis (( t(:foreground "#C678DD"))))))

(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font Mono" :height 125)
#+END_SRC

** Parinfer

#+BEGIN_SRC emacs-lisp
(use-package parinfer-rust-mode
  :hook '(emacs-lisp-mode org-mode)
  :init
  (setq parinfer-rust-auto-download t))
#+END_SRC

** Marginalia (Extra Information on Variable/Function/FindFile/etc)

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode)
  (setq marginalia-align 'center
    marginalia-align-offset 20))
#+END_SRC


* Misc

** Highlight Trailing Whitespace

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook
          (lambda () (font-lock-add-keywords nil '(("\\s-+$" 0 'trailing-whitespace)))))
#+END_SRC

** Don't affect previous line with C-backspace

#+BEGIN_SRC emacs-lisp
(defun my/backward-kill-word ()
  "Kill backward to the beginning of the current word, but do not cross lines."
  (interactive)
  (if (not (looking-back "^\\s-*")) (backward-kill-word 1) (delete-horizontal-space)))

(global-set-key (kbd "<C-backspace>") 'my/backward-kill-word)
#+END_SRC

** TODOs

#+BEGIN_SRC emacs-lisp
;; TODO:
;; 1. Avy / EasyMotion make it better
;; 2. Href opening in default apps set by XDG-MIME / XDG-SCHEME-HANDLER
#+END_SRC
