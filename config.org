#+TITLE: Main Emacs Config (after early-init.el and init.el)
#+PROPERTIES: header-args :lexical t

* General Tweaks

** Better Defaults (Mandatory)

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t
      org-export-preserve-breaks t)

(setq use-short-answers t)
(global-visual-line-mode t)     ; Word Wrap

(setq-default fill-column 120)

(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default evil-shift-width tab-width)
#+END_SRC

** Set Keybinds

#+BEGIN_SRC emacs-lisp :noweb-ref general-config :tangle no
(general-define-key
 :states '(insert motion)
 :keymaps '(override local global minibuffer-mode-map)

 "C-S-v" 'evil-paste-before-cursor-after
 "TAB" 'tab-to-tab-stop)

(general-define-key
 :states '(normal motion visual operator emacs)
 :keymaps '(override local global)

 "H" 'evil-beginning-of-line
 "J" 'evil-goto-line
 "K" 'evil-goto-first-line
 "L" 'evil-end-of-line

 "," 'evil-scroll-line-down
 "." 'evil-scroll-line-up

 "C-+" 'text-scale-increase
 "C-_" 'text-scale-decrease
 "C--" 'text-scale-decrease

 "<escape>" 'keyboard-escape-quit
 "<tab>" 'next-buffer
 "<backtab>" 'previous-buffer
 "?" 'consult-line

 "go" 'hop-word
 "gl" 'hop-char)

(general-create-definer leader-key
  :states '(normal motion visual operator emacs)
  :keymaps '(override local global)
  :prefix "SPC")

(leader-key
  "ff" 'find-file
  "tw" 'delete-trailing-whitespace
  "ev" 'eval-region
  "x" 'kill-this-buffer
  "c" 'display-fill-column-indicator-mode
  "s" 'switch-to-buffer
  "/" 'comment-line)                    ;

;; (global-unset-key (kbd "C-c C-a"))
;; (evilem-default-keybindings "C-c C-a")
;; (define-key evilem-map "s"
;;   (evilem-create (list #'evil-snipe-repeat #'evil-snipe-repeat-reverse
;;                   :name 'evil-easymotion-snipe-forward
;;                   :pre-hook (save-excursion (call-interactively #'evil-snipe-s))
;;                   :bind ((evil-snipe-scope 'buffer))
;;                         (evil-snipe-enable-highlight)
;;                         (evil-snipe-enable-incremental-highlight))))

#+END_SRC


* Packages

** Undo History

#+BEGIN_SRC emacs-lisp
;; keep undo history
(use-package undo-fu)
;; save command history
(use-package savehist
  :elpaca nil
  :init
  (savehist-mode))
;; keep file history between emacs sessions
(use-package undohist
  :init
  (setq undo-tree-history-directory-alist '(((concat user-emacs-directory "/undohist"))))
  :config
  (undohist-initialize))
#+END_SRC

** Evil + General (Vim-Keybind)

#+BEGIN_SRC emacs-lisp :noweb yes
(use-package evil
  :after undo-fu
  :init
  (setq evil-want-keybinding nil)
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1)
  (setq ;evil-want-fine-undo t
   evil-want-minibuffer t
   evil-vsplit-window-right t
   evil-split-window-below t))

(use-package helpful)
(use-package general
  :after (evil helpful avy)  ; evil-easymotion evil-snipe)
  :config
  (general-override-mode)
  (general-auto-unbind-keys)
  (general-evil-setup t)

  ;; Remap C-h to helpful package
  (general-define-key
   :prefix "C-h"
   "f" #'helpful-callable
   "v" #'helpful-variable
   "k" #'helpful-key
   "F" #'helpful-function
   "C" #'helpful-command)
  <<general-config>>)
#+END_SRC

** Vertico + Orderless (Autosuggestion & Fuzzy Finder)

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (setq vertico-count 20
        vertico-resize nil
        vertico-cycle t)
  (vertico-mode))

(use-package orderless
  :custom
  ;; (orderless-matching-styles '(orderless-literal orderless-regexp orderless-flex))
  (completion-styles '(orderless))
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Consult + Marginalia

Consult: Extend default commands
Marginalia: Add extra information on Variable/Function/FindFile/etc

#+BEGIN_SRC emacs-lisp
(use-package consult)

(use-package marginalia
  :config
  (marginalia-mode)
  (setq marginalia-align 'center
        marginalia-align-offset 20))
#+END_SRC

** Which Key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
(setq which-key-idle-delay 0.4)
#+END_SRC

** Hop - Jump Anywhere on Buffer

#+BEGIN_SRC emacs-lisp
;; install pcre(-devel) package first from system package manager
(use-package pcre
  :elpaca (pcre :host github :repo "syohex/emacs-pcre"
                :files (:default "pcre.el" "pcre-core.so")
                :pre-build ("make" "all")))

(use-package hop
  :elpaca (hop :host github :repo "Animeshz/hop.el"))
#+END_SRC


** Theme & Font
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (load-theme 'doom-city-lights t)
  (custom-set-faces
   '(doom-themes-visual-bell (( t(:background "#00FFFF"))))
   '(org-ellipsis (( t(:foreground "#C678DD"))))))

(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font Mono" :height 125)
#+END_SRC

** Parinfer

#+BEGIN_SRC emacs-lisp
(use-package parinfer-rust-mode
  :hook '(emacs-lisp-mode org-mode)
  :init
  (setq parinfer-rust-auto-download t))
#+END_SRC


** VTerm

#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC


* Misc

** Highlight Trailing Whitespace

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'prog-mode-hook
          (lambda () (font-lock-add-keywords nil '(("\\s-+$" 0 'trailing-whitespace)))))
#+END_SRC

** Don't affect previous line with C-backspace

#+BEGIN_SRC emacs-lisp
(defun my/backward-kill-word ()
  "Kill backward to the beginning of the current word, but do not cross lines."
  (interactive)
  (if (not (looking-back "^\\s-*")) (backward-kill-word 1) (delete-horizontal-space)))

(global-set-key (kbd "<C-backspace>") 'my/backward-kill-word)
#+END_SRC

** Change backup file dump path

#+BEGIN_SRC emacs-lisp
(defvar user-temporary-file-directory
  (concat temporary-file-directory user-login-name "/"))
(make-directory user-temporary-file-directory t)
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . ,user-temporary-file-directory)
        (,tramp-file-name-regexp nil)))
(setq auto-save-list-file-prefix
      (concat user-temporary-file-directory ".auto-saves-"))
(setq auto-save-file-name-transforms
      `((".*" ,user-temporary-file-directory t)))
#+END_SRC

** TODOs

#+BEGIN_SRC emacs-lisp
;; TODO:
;; 1. Href opening in default apps set by XDG-MIME / XDG-SCHEME-HANDLER
#+END_SRC

* Resources References

These resources were very helpful in formation of my config. So a huge phrase of appreciation to all those people who were part of this.

- [[https://opensource.com/sites/default/files/gated-content/cheat_sheet_emacs.pdf][Emacs Cheatsheet - Opensource.com]]
- [[https://github.com/progfolio/.emacs.d][Progfolio's Emacs Config (Creator of Elpaca package manager we're currently using)]]
- [[https://github.com/aadi58002/emacs-config/blob/main/init.org#avy-map][Aadi58002's Emacs Config (My classmate, been known for the Emacs user of our batch)]]
- [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html][Luca's Emacs Config]] & [[https://www.karsdorp.io/posts/dotemacs/][Karsdorp's Emacs Config]] - Long list of useful options to use, like a reference-book!
